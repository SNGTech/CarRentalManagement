@page "/colours/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Car Colours</h3>
<br />

@if (Colours == null) {
	<div class="alert alert-info">Loading Colours...</div>
}
else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Name</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var colour in Colours)
			{
				<tr>
					<td>@colour.Name</td>
					<td>
						<a href="/colours/view/@colour.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>	
						</a>
						<a href="/colours/edit/@colour.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>	
						</a>
						<button class="btn btn-danger" @onclick="@(() => Delete(colour.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	public List<Colour>? Colours;

	protected override async Task OnInitializedAsync()
	{
		Colours = await _client.GetFromJsonAsync<List<Colour>>(EndPoints.ColoursEndpoint);
	}

	private async Task Delete(int colourId)
	{
		if (Colours != null)
		{
			var colour = Colours.First(q => q.Id == colourId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {colour.Name}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{EndPoints.ColoursEndpoint}/{colourId}");
				await OnInitializedAsync();
			}
		}
	}
}